generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model blog {
  created_at DateTime?  @default(dbgenerated("CURRENT_DATE")) @db.Date
  content    String?    @db.VarChar
  time_read  Int?
  title      String?    @db.VarChar
  slug       String?    @db.VarChar
  id         String     @id(map: "blog_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String     @db.Uuid
  blog_tag   blog_tag[]
}

model blog_tag {
  blog_id String @db.Uuid
  tag_id  String @db.Uuid
  blog    blog   @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "blog_tag_blog_fk")
  tag     tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "blog_tag_tag_fk")

  @@id([blog_id, tag_id], map: "blog_tag_pk")
}

model company {
  company_name      String             @db.VarChar
  slug              String?            @unique @db.VarChar
  company_type      String?            @db.VarChar
  country           String?            @db.VarChar
  working_day       String?            @db.VarChar
  ot_policy         String?            @db.VarChar
  company_size      String?            @db.VarChar
  overview          String?            @db.VarChar
  company_website   String?            @db.VarChar
  company_facebook  String?            @db.VarChar
  brief_overview    String?            @db.VarChar
  id                String             @id(map: "company_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  enable            Boolean?           @default(true)
  company_benefit   company_benefit?
  company_key_skill company_key_skill?
  company_location  company_location[]
  follow            follow[]
  job               job[]
  review            review[]
}

model company_benefit {
  key_benefit        String? @db.VarChar
  detail_description String? @db.VarChar
  company_images     String? @db.VarChar
  company_id         String  @id(map: "company_benefit_pk") @db.Uuid
  company            company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_benefit_company_fk")
}

model company_key_skill {
  key_skills  String? @db.VarChar
  description String? @db.VarChar
  company_id  String  @id(map: "company_key_skill_pk") @db.Uuid
  company     company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_key_skill_company_fk")
}

model company_location {
  address              String                 @db.VarChar
  long                 Decimal?               @db.Decimal
  lat                  Decimal?               @db.Decimal
  id                   String                 @id(map: "company_location_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id           String                 @db.Uuid
  company              company                @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "company_location_company_fk")
  job_working_location job_working_location[]
}

model follow {
  user_id    String  @db.Uuid
  company_id String  @db.Uuid
  company    company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "follow_company_fk")

  @@id([user_id, company_id], map: "follow_pk")
}

model job {
  name                      String?                @db.VarChar
  country                   String?                @db.VarChar
  skills                    String?                @db.VarChar
  working_type              String?                @db.VarChar
  top_3_reason              String?                @db.VarChar
  job_description           String?                @db.VarChar
  skill_demand              String?                @db.VarChar
  why_you_love_working_here String?                @db.VarChar
  date_posted               DateTime?              @db.Date
  id                        String                 @id(map: "job_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id                String                 @db.Uuid
  is_closed                 Boolean?               @default(false)
  hide_salary               Boolean?               @default(false)
  salary_from               Int?
  salary_to                 Int?
  unit                      String?                @db.VarChar
  company                   company                @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_company_fk")
  job_apply                 job_apply[]
  job_saved                 job_saved[]
  job_working_location      job_working_location[]
}

model job_apply {
  cv           String?   @db.VarChar
  cover_letter String?   @db.VarChar
  id           String    @id(map: "job_apply_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  job_id       String    @db.Uuid
  date_apply   DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  status       String?   @default("Submitting") @db.VarChar
  job          job       @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_apply_job_fk")
}

model job_preferences {
  skills               String? @db.VarChar
  job_level            String? @db.VarChar
  current_salary       Int?
  expected_salary_from Int?
  working_type         String? @db.VarChar
  company_type         String? @db.VarChar
  company_size         String? @db.VarChar
  location             String? @db.VarChar
  expected_salary_to   Int?
  user_id              String  @id(map: "job_preferences_pk") @db.Uuid
}

model job_saved {
  user_id String @db.Uuid
  job_id  String @db.Uuid
  job     job    @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_saved_job_fk")

  @@id([user_id, job_id], map: "job_saved_pk")
}

model job_working_location {
  job_id              String           @db.Uuid
  company_location_id String           @db.Uuid
  company_location    company_location @relation(fields: [company_location_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_working_location_company_location_fk")
  job                 job              @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "job_working_location_job_fk")

  @@id([job_id, company_location_id], map: "job_working_location_pk")
}

model review {
  summary                      String         @db.VarChar
  ot_satisfy_reason            String?        @db.VarChar
  input_experience             String?        @db.VarChar
  input_improvement_suggestion String?        @db.VarChar
  is_recommended               Boolean?
  ot_satisfy                   Boolean?
  company_id                   String         @db.Uuid
  user_id                      String         @db.Uuid
  id                           String         @id(map: "review_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company                      company        @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "review_company_fk")
  review_rating                review_rating?
}

model review_rating {
  overall_rating    Int?
  salary_benefits   Int?
  training_learning Int?
  management_cares  Int?
  culture_fun       Int?
  office_workspace  Int?
  review_id         String @id(map: "review_rating_pk") @db.Uuid
  review            review @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "review_rating_review_fk")
}

model tag {
  tag_name String     @db.VarChar
  id       String     @id(map: "tag_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  blog_tag blog_tag[]
}

model user {
  name            String?   @db.VarChar
  email           String?   @db.VarChar
  phone           String?   @db.VarChar
  gender          String?   @db.Char(1)
  dob             DateTime? @db.Date
  current_address String?   @db.VarChar
  about_me        String?   @db.VarChar
  cover_letter    String?   @db.VarChar
  personal_link   String?   @db.VarChar
  role            Int
  password        Bytes?
  img_url         String?   @db.VarChar
  id              String    @id(map: "user_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model user_award {
  award_name  String? @db.VarChar
  org_name    String? @db.VarChar
  issue_date  String? @db.VarChar
  description String? @db.VarChar
  id          String  @id(map: "user_award_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String  @db.Uuid
}

model user_certificate {
  cert_name   String? @db.VarChar
  org_name    String? @db.VarChar
  cert_url    String? @db.VarChar
  description String? @db.VarChar
  issue_date  String? @db.VarChar
  user_id     String  @db.Uuid
  id          String  @id(map: "user_certificate_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model user_cv {
  date_uploaded DateTime? @db.Date
  url           String?   @db.VarChar
  id            String    @id(map: "user_cv_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
}

model user_education {
  school                String?   @db.VarChar
  major                 String?   @db.VarChar
  from_date             DateTime? @db.Date
  to_date               DateTime? @db.Date
  additional_detail     String?   @db.VarChar
  current_studying_here Boolean?
  id                    String    @id(map: "user_education_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String    @db.Uuid
}

model user_project {
  project_name           String?   @db.VarChar
  start_date             DateTime? @db.Date
  end_date               DateTime? @db.Date
  description            String?   @db.VarChar
  project_url            String?   @db.VarChar
  currently_working_here Boolean?
  id                     String    @id(map: "user_project_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String    @db.Uuid
}

model user_skill {
  name    String? @db.VarChar
  level   String? @db.VarChar
  id      String  @id(map: "user_skill_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id String  @db.Uuid
}

model work_experience {
  job_title              String?   @db.VarChar
  currently_working_here Boolean?
  from_date              DateTime? @db.Date
  to_date                DateTime? @db.Date
  description            String?   @db.VarChar
  company                String?   @db.VarChar
  projects               String?   @db.VarChar
  id                     String    @id(map: "work_experience_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String    @db.Uuid
}

model company_request {
  id                      String  @id(map: "company_request_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  representative_name     String? @db.VarChar
  representative_position String? @db.VarChar
  representative_email    String? @db.VarChar
  representative_phone    String? @db.VarChar
  company_name            String? @db.VarChar
  company_location        String? @db.VarChar
  company_weburl          String? @db.VarChar

}
