version: "3.4"

services:
  # app:
  #   image: capstone
  #   build:
  #     context: .
  #   ports:
  #     - "4000:4000"
  #   # volumes: # Comment this "volumes" section when run in PRODUCTION mode
  #   #   - .:/app
  #   #   - /app/node_modules
  #   # command: /bin/sh -c "yarn generate:prisma && yarn migrate:init && yarn seed && yarn start" # Comment this line when run in PRODUCTION mode
  #   environment:
  #     - NODE_ENV=development
  #     - PORT=4000
  #     - DATABASE_URL=postgresql://postgres:localdb@postgres:5432/capstone
  #     - APOLLO_PLAYGROUND=true
  #     - APOLLO_INTROSPECTION=true
  #     - APOLLO_DEBUG=true
  #     - APOLLO_TRACING=true
  #     - LOGGER_ROUTE_NAME=capstone
  #     - LOGGER_ROUTE_STORAGE=false
  #     - KEY_AUTHORIZATION=test
  #     - KEY_CONSOLE=test_key
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres

  postgres:
    image: postgres:12.1-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: localdb
      POSTGRES_DB: keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./keycloak/create-db.sql:/docker-entrypoint-initdb.d/create_database.sql
    networks:
      - demo-network

  start_dependencies:
    image: dadarek/wait-for-dependencies
    depends_on:
      - keycloak
    command: postgres:5432
    networks:
      - demo-network

  # setup keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    command: -v start-dev --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_URL_PORT: 5432
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: localdb
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    depends_on:
      - postgres
    networks:
      - demo-network

  redis:
    image: redis:7.2.4-alpine
    ports:
      - "6379:6379"
    networks:
      - demo-network
volumes:
  postgres:

networks:
  demo-network:
